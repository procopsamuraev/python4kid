#!/usr/local/conda3/bin/python
"""
Query AWS Instances settings, report anything insanity.

Including checks:
   - check for unattached volumes, ENIs, old snapshots, capacity reservations, scheduled aws events

usage:
* should be executed with *aws enabled hosts. eg. seotest2.skae.tower-research.com
check_awscloud --site aws-eucentral1
eu-central-1    9       problems found(1 critical)
or 
check_awscloud --site aws-eucentral1 -p
+--------------+--------------------------+-----------------------------------------------------------------------+------+
| Site         | Message                  | Data                                                                  | Code |
+--------------+--------------------------+-----------------------------------------------------------------------+------+
| eu-central-1 | unattached vol           |  id:vol-0bce71df6de923d5e state:available age_day:127.0               | 1    |
| eu-central-1 | volume with no tag       |  id:vol-0bce71df6de923d5e                                             | 1    |
| eu-central-1 | volume with no tag       |  id:vol-0223bb7d36509f538                                             | 1    |
| eu-central-1 | volume with no tag       |  id:vol-0de8e48d21542e91a                                             | 1    |
| eu-central-1 | no capacitry reservation |                                                                       | 0    |
| eu-central-1 | eni not inuse            |  id:eni-02fc9859e40d0bcc3 state:available                             | 1    |
| eu-central-1 | snapshot older 14d       |  id:snap-0cc11ff9277812320 age_day:1975.0                             | 1    |
| eu-central-1 | snapshot older 14d       |  id:snap-0804264f02b4bf17f age_day:1996.0                             | 1    |
| eu-central-1 | snapshot older 14d       |  id:snap-0e2bf9f04bb4bb3fd age_day:1996.0                             | 1    |
| eu-central-1 | scheduled event          |  id:i-0584b8ff74514f1ec event:system-reboot Till:May 06,22:00UTC,2025 | 2    |
+--------------+--------------------------+-----------------------------------------------------------------------+------+
"""
__author__ = "vmurzabaev, jun"
__copyright__ = "Copyright 2025, Tower research Capital"
__date__ = "09/01/2025"
__status__ = "Production"
__version__ = "1.1.1"


import argparse
import sys
import datetime
from prettytable import PrettyTable
from collections import defaultdict
from twr_sysadm.configuration import twr_load_config_from_yaml
from twr_sysadm.logging import twr_get_logger
from twr_sysadm.cloud_lib import AwsServer
from twr_sysadm.vault import Vault


date_now = datetime.datetime.now(datetime.timezone.utc)
max_age = 14  # in days, when raise critical alert
aws_owner_id = '139780901738'
not_trading_teams = ['production engineering', 'managed services', 'enterprise', 'core engineering', 'server reliability engineering', 'nre', 'sre']
host_exception_io = ['ansatzalgo3.aws-apse1az3']


def check_status(logger, aws):
    code, data, report_details = 0, [], ''
    response = aws.client.describe_instance_status(Filters=[
        {'Name': 'event.code', 'Values': ['instance-reboot', 'system-reboot', 'system-maintenance', 'instance-retirement', 'instance-stop']},])
    list_instanses_status = response['InstanceStatuses']
    if len(list_instanses_status) == 0:
        data.append({'message': 'no scheduled events', 'details':'no schedules events found ', 'code': code})
    else:
        for instance in list_instanses_status:
            logger.debug(instance)
            for event in instance['Events']:
                event_deadline = event.get('NotAfter').strftime("%b %d,%H:%M%Z,%Y")  # The latest scheduled end time for the event.
                report_details = f"id: {instance.get('InstanceId')}, event: {event.get('Code')} deadline: {event_deadline}"
                data.append({'message': 'scheduled event', 'details': report_details, 'code': 2})
    return data


def check_capacity_reservation(logger, aws):
    code, data, report_details = 0, [], ''
    response = aws.client.describe_capacity_reservations(Filters=[
                {'Name': 'state', 'Values': ['active']},])
    cr_list = response['CapacityReservations']
    if len(cr_list) == 0:
        data.append({'message': 'no cr', 'details':'no active capacity reservation found', 'code': code})
    else:
        for cr in cr_list:
            logger.debug(cr)
            state, date_start = cr['State'], cr['StartDate']
            cr_age = (date_now - date_start).total_seconds() // 86400
            if cr.get('AvailableInstanceCount') > 0:
                code = 2 if cr_age > max_age else 1
            report_details = f"cr_id: {cr.get('CapacityReservationId')}, state: {state} {cr_age} days"
            data.append({'message': 'cr active', 'details':report_details , 'code': code })
    return data


def check_snapshots(logger, aws):
    code, data, report_details = 0, [],''
    response = aws.client.describe_snapshots(Filters=[
        {'Name': 'encrypted', 'Values': ['true']},
        {'Name': 'status', 'Values': ['completed']},])
    snapshot_list = response['Snapshots']
    if len(snapshot_list) == 0:
        data.append({'message': 'no snapshots', 'details': 'no spanpshot found', 'code': code})
    else:
        for item in snapshot_list:
            logger.debug(item)
            snapshot_age = (date_now - item['StartTime']).total_seconds() // 86400
            if snapshot_age > max_age and item['OwnerId'] == aws_owner_id:
                report_details = f"{item.get('SnapshotId')} {snapshot_age} days old"
                data.append({'message': 'old snapshot', 'details': report_details, 'code': 1})
    return data


def check_volumes_status(logger, aws):
    code, data, message, report_details = 0, [], '', ''

    response = aws.client.describe_volumes(Filters=[
                {'Name': 'volume-type', 'Values': ['io*', 'gp3']}, ])
    volume_list = response['Volumes']
	
    if len(volume_list) == 0:
        data.append({'message': 'no io/gp3 volumes','details':'no io or gp3 volumes found', 'code': code})
    else:
        for volume in volume_list:
            code, message, report_details = 0, '', ''
            logger.debug(volume)
            volume_age = (date_now - volume.get('CreateTime')).total_seconds() // 86400
            if volume_age < max_age:
                continue
            volume_tag, volume_id, volume_state = volume.get('Tags'), volume.get('VolumeId'), volume.get('State')
            volume_iops, volume_tps = volume.get('Iops', 0), volume.get('Throughput', 0)
            
            if volume_tag:
                for tag in volume_tag:
                    if tag.get('Key').lower() == 'organization':
                        team_name = tag.get('Value').lower()
                    if tag.get('Key').lower() == 'name':
                        host_name = tag.get('Value').lower()
                        
            else: 
                message = 'volume tag'
                report_details  = f"no tags {volume_id}:{volume_state}"
                data.append({'message': message, 'details':report_details, 'code': 1})
                continue
           
            if volume_state != 'in-use':
                message = 'volume not inuse'
                report_details  = f"{volume_id} state: {volume_state} {volume_age} days old"
            elif not team_name or host_name: 
                message = 'volume tag'
                report_details = f"no 'organization'/'name' tag {volume_id}:{volume_state} "
            elif 'cryptodev' in host_name:
                continue
            elif volume.get('VolumeType') == 'io2' and host_name not in host_exception_io:
                message = 'volume performance'
                report_details = f"{volume_id} {volume.get('VolumeType')} {team_name}:{host_name}"
            elif team_name in not_trading_teams:
                continue
            elif volume_iops < 16000 or volume_tps < 1000:
                message = 'volume performance'
                report_details = f"{volume_id} {volume.get('VolumeType')} iops:{volume_iops}  tps:{volume_tps} {host_name}"
            
            if report_details: 
                data.append({'message': message, 'details':report_details, 'code': 1})
    
    logger.debug(message)
    return data


def check_eni_unattached(logger, aws):
    code, data, message, report_details = 0, [], '',  ''
    response = aws.client.describe_network_interfaces(Filters=[{'Name': 'status', 'Values': ['available']},])
    eni_list = response['NetworkInterfaces']
    if len(eni_list) == 0:
        data.append({'message': 'eni', 'details':'no unatached ENI','code': code})
    else:
        for eni in eni_list:
            logger.debug(eni)
            eni_id, state = eni['NetworkInterfaceId'], eni['Status']
            message = 'eni not inuse'
            report_details = f"{eni_id}, state: {state}"
            data.append({'message': message, 'details': report_details, 'code': 1})
    return data


def main():
    exit_code = 0
    parser = argparse.ArgumentParser(description="Sanity check for AWS cloud")
    parser.add_argument("-d", "--debug", help="Debug output", action="store_true")
    parser.add_argument("--site", help="Site to check: aws-apnortheast1")
    parser.add_argument('-p', '--print', help='Report insanities details', action="store_true")
    parser.add_argument('-s', '--status', help='Report health status, scheduled events', action="store_true")
    parser.add_argument('-cr', help='Report unused Capacity Reservations', action="store_true")
    parser.add_argument('--eni', help='Report ENI not inuse', action="store_true")
    parser.add_argument('--volume', help='Do volume check', action="store_true")
    parser.add_argument('--snapshot', help='Report snapshots', action="store_true")

    args = parser.parse_args()
    log_level = 'debug' if args.debug else 'info'
    logger = twr_get_logger(log_level=log_level, stdout="Yes")

    cfg = twr_load_config_from_yaml(section="aws_region_mapping")
    aws_regions = set()
    if not args.site:
        for aws_region in cfg.values():
            aws_regions.add(aws_region)
    elif args.site in cfg:
        aws_regions.add(cfg[args.site])
    else:
        logger.error("Invalid region: %s", args.site)
        sys.exit(-1)

    cfg = twr_load_config_from_yaml(section="trc_vault")
    v = Vault(log_obj=logger, vault_url=cfg['base_url'])
    access_id, access_key, _ = v.get_access_info(
        path="SEO/clouds/data/aws/terraform",
        id_keyname="aws_access_key_id",
        key_keyname="aws_secret_access_key")

    status = defaultdict(list)
    for aws_region in aws_regions:
        aws = AwsServer(logger, aws_region, access_id, access_key)
        if args.status:
            status[aws_region].append(check_status(logger, aws))
        elif args.cr:
            status[aws_region].append(check_capacity_reservation(logger, aws))
        elif args.eni:
            status[aws_region].append(check_eni_unattached(logger, aws))
        elif args.volume:
            status[aws_region].append(check_volumes_status(logger, aws))
        elif args.snapshot:
            status[aws_region].append(check_snapshots(logger, aws))
        else:
            status[aws_region].append(check_volumes_status(logger, aws))
            status[aws_region].append(check_capacity_reservation(logger, aws))
            status[aws_region].append(check_eni_unattached(logger, aws))
            status[aws_region].append(check_snapshots(logger, aws))
            status[aws_region].append(check_status(logger, aws))

    if args.print:
        table_print = PrettyTable()
        table_print.align = 'l'
        table_print.field_names = ["Site", "Message", "Details", "SEV"]
        for aws_region in status:
            for list_status in status[aws_region]:
                for row in list_status:
                    exit_code_new = row.get('code')
                    exit_code = max(exit_code_new, exit_code)
                    table_print.add_row([aws_region, row.get('message'), row.get('details'), str(row.get('code')).replace('0','ok').replace('1', 'warning').replace('2','critical')])
        print(table_print)
    else:
        for aws_region in status:
            problem_count = 0
            problem_count_critical = 0 
            for list_status in status[aws_region]:
                for row in list_status: 
                    exit_code_new = row.get('code')
                    if exit_code_new >1: 
                        problem_count_critical += 1
                        problem_count += 1
                    elif exit_code_new > 0:
                        problem_count += 1
                    exit_code = max(exit_code_new, exit_code)
            if (args.status or args.cr) and problem_count_critical:
                print(f"{aws_region} {row.get('details')}")
            elif problem_count:
                print(f"{aws_region}\t{problem_count}\tproblems found({problem_count_critical} critical)")
    sys.exit(exit_code)


if __name__ == '__main__':
    main()